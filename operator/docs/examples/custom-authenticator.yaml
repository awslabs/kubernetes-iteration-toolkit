# To create this cluster, run:
# * export KUBECONFIG=<management-cluster>
# * export GUEST_CLUSTER_NAME="foobar"
# * envsubst < custom-authenticator.yaml | kubectl --kubeconfig $KUBECONFIG apply -f -
# * k certificate approve $(k get csr | grep "Pending" | awk '{print $1}')

apiVersion: kit.k8s.sh/v1alpha1
kind: ControlPlane
metadata:
  name: $GUEST_CLUSTER_NAME
spec:
  master:
    apiServer:
      replicas: 3
    authenticator:
      spec:
        containers:
        - name: aws-iam-authenticator
          image: public.ecr.aws/eks-distro/kubernetes-sigs/aws-iam-authenticator:v0.5.9-eks-1-19-22
          securityContext:
            runAsUser: 10000
            runAsGroup: 10000
          args:
          - --backend-mode=MountedFile,EKSConfigMap
          # TODO: scope down permissions
          # There are 3 kubeconfigish flags for the authenticator:
          # * --kubeconfig -> this is configuring one direction communication from authenticator to kube-apiserver
          # * --generate-kubeconfig -> this is configuring communication from kube-apiserver to authenticator (this is the token file passed to kube-apiserver).
          # * --kubeconfig-pregenerated -> a boolean flag if we don't want the --kubeconfig flag to generate a new kubeconfig.
          - --kubeconfig=/var/aws-iam-authenticator/auth-to-k8s-kubeconfig/config
          volumeMounts:
          - mountPath: /var/aws-iam-authenticator/auth-to-k8s-kubeconfig/
            name: auth-to-k8s-kubeconfig
        volumes:
        - secret:
            secretName: $GUEST_CLUSTER_NAME-kube-admin-config
          name: auth-to-k8s-kubeconfig
