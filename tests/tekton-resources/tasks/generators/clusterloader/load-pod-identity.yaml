---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: load-pod-identity
  namespace: scalability
spec:
  description: "clusterloader2 task to run various types of cl2 tests on a given cluster."
  params:
  - name: giturl
    description: "git url to clone the package"
    default: https://github.com/kubernetes/perf-tests.git
  - name: cl2-branch
    description: "The branch of clusterloader2 you want to use"
    default: "master"
  - name: cl2-eks-pod-identity-pods
    description: "pods for testing eks pod identity service"
    default: "5000"
  - name: cl2-default-qps
    description: "default qps"
    default: "100"
  - name: cl2-default-burst
    description: "default burst"
    default: "200"
  - name: cl2-uniform-qps
    description: "uniform qps"
    default: "100"
  - name: cl2-metric-dimension-name
    description: "default metric dimension name"
    default: "ClusterName"
  - name: cl2-metric-namespace
    description: "default metric namespace for pod identity"
    default: "EKSPodIdentityScalabilityTests"
  - name: cl2-metric-latency-name
    description: "default metric latency name for pod identity"
    default: "CredentialFetchLatency"
  - name: cl2-metric-period
    description: "default metric period"
    default: "300"
  - name: nodes
    description: "number of dataplane nodes to run the load test against"
    default: "1000"
  - name: results-bucket
    description: "Results bucket with path of s3 to upload results"
  - name: region
    default: "us-west-2"
    description: The region where the cluster is in.
  - name: cluster-name
    description: "The name of the EKS cluster you want to spin"
  - name: endpoint
    default: ""
  - name: namespace-prefix
    default: "default"
    description: "The prefix of namespaces for EKS Pod Identity test."
  - name: namespace-count
    default: "1"
    description: "The number of namespaces for EKS Pod Identity test"
  - name: pia-test-config-url
    default: "https://raw.githubusercontent.com/awslabs/kubernetes-iteration-toolkit/main/tests/assets/eks-pod-identity/config.yaml"
  - name: pia-test-pod-spec-url
    default: "https://raw.githubusercontent.com/awslabs/kubernetes-iteration-toolkit/main/tests/assets/eks-pod-identity/pod-default.yaml"
  - name: timeout-pia-pod-creation
    default: "20m"
  - name: timeout-pia-pod-startup
    default: "5m"
  - name: amp-workspace-id
    description: The AMP workspace ID where remote write needs to happen.
    default: ""
  results:
    - name: datapoint
      description: Stores the CL2 result that can be consumed by other tasks (e.g. cloudwatch)
    - name: s3_result
      description: Stores the S3 result path after compute
  workspaces:
  - name: source
    mountPath: /src/k8s.io/
  - name: results
  - name: config
    mountPath: /config/
  stepTemplate:
    env:
    - name: KUBECONFIG
      value: /config/kubeconfig
  steps:
  - name: git-clone
    image: alpine/git
    workingDir: $(workspaces.source.path)
    script: |
      git clone $(params.giturl)
      cd $(workspaces.source.path)/perf-tests/
      git fetch origin --verbose --tags
      git checkout $(params.cl2-branch)
      git branch
  - name: prepare-loadtest
    image: golang:1.24
    workingDir: $(workspaces.source.path)
    script: |
      S3_RESULT_PATH=$(params.results-bucket)
      echo $S3_RESULT_PATH > $(results.s3_result.path)
      echo "S3 Path: $S3_RESULT_PATH"
      cat > "$(workspaces.source.path)/overrides.yaml" <<EOL
      CL2_EKS_POD_IDENTITY_PODS: $(params.cl2-eks-pod-identity-pods)
      CL2_DEFAULT_QPS: $(params.cl2-default-qps)
      CL2_DEFAULT_BURST: $(params.cl2-default-burst)
      CL2_UNIFORM_QPS: $(params.cl2-uniform-qps)
      CL2_CLUSTER_NAME: $(params.cluster-name)
      CL2_METRIC_DIMENSION_NAME: $(params.cl2-metric-dimension-name)
      CL2_METRIC_NAMESPACE: $(params.cl2-metric-namespace)
      CL2_METRIC_LATENCY_NAME: $(params.cl2-metric-latency-name)
      CL2_METRIC_PERIOD: $(params.cl2-metric-period)
      CL2_NAMESPACE_PREFIX: $(params.namespace-prefix)
      CL2_NAMESPACE_COUNT: $(params.namespace-count)
      CL2_TIMEOUT_EKS_POD_IDENTITY_POD_CREATION: $(params.timeout-pia-pod-creation)
      CL2_TIMEOUT_EKS_POD_IDENTITY_POD_STARTUP: $(params.timeout-pia-pod-startup)
      CL2_PROMETHEUS_NODE_SELECTOR: "eks.amazonaws.com/nodegroup: monitoring-$(params.cluster-name)-nodes-1"
      EOL
      cat $(workspaces.source.path)/overrides.yaml
      cp $(workspaces.source.path)/overrides.yaml $(workspaces.results.path)/overrides.yaml

      # Enable Prometheus if the remote workspace id is provided
      if [ -n "$(params.amp-workspace-id)" ]; then
      cat << EOF >> $(workspaces.source.path)/perf-tests/clusterloader2/pkg/prometheus/manifests/prometheus-prometheus.yaml
        containers:
          - name: aws-sigv4-proxy-sidecar
            image: public.ecr.aws/aws-observability/aws-sigv4-proxy:1.0
            args:
              - --name
              - aps
              - --region
              - $(params.region)
              - --host
              - aps-workspaces.$(params.region).amazonaws.com
              - --port
              - :8005
            ports:
              - name: aws-sigv4-proxy
                containerPort: 8005
        remoteWrite:
          - url: http://localhost:8005/workspaces/$(params.amp-workspace-id)/api/v1/remote_write
            queueConfig:
              capacity: 2500
              maxSamplesPerSend: 1000
              maxShards: 200
        externalLabels:
          cluster_name: $(params.cluster-name)
          s3_path: $S3_RESULT_PATH
      EOF
      cat $(workspaces.source.path)/perf-tests/clusterloader2/pkg/prometheus/manifests/prometheus-prometheus.yaml
      cat << EOF >> $(workspaces.source.path)/perf-tests/clusterloader2/pkg/prometheus/manifests/0prometheus-operator-deployment.yaml
            tolerations:
              - key: monitoring
                operator: Exists
                effect: NoSchedule
      EOF
      cat $(workspaces.source.path)/perf-tests/clusterloader2/pkg/prometheus/manifests/0prometheus-operator-deployment.yaml
      fi
      # Building clusterloader2 binary
      cd $(workspaces.source.path)/perf-tests/clusterloader2/
      GOOS=linux CGO_ENABLED=0  go build -v -o ./clusterloader ./cmd
  - name: run-loadtest
    image: alpine/k8s:1.30.2
    onError: continue
    script: |
      #!/bin/bash
      if [ -n "$(params.amp-workspace-id)" ]; then
        export ENABLE_PROMETHEUS_SERVER=true
        export PROMETHEUS_PVC_STORAGE_CLASS=gp2
        export PROMETHEUS_SCRAPE_KUBE_PROXY=false
        export PROMETHEUS_KUBE_PROXY_SELECTOR_KEY=k8s-app
        export PROMETHEUS_SCRAPE_APISERVER_ONLY=true
      fi

      #prepare eks pod identity load test config
      mkdir -p $(workspaces.source.path)/perf-tests/clusterloader2/testing/eks-pod-identity
      curl -s $(params.pia-test-config-url) -o $(workspaces.source.path)/perf-tests/clusterloader2/testing/eks-pod-identity/config.yaml
      curl -s $(params.pia-test-pod-spec-url) -o $(workspaces.source.path)/perf-tests/clusterloader2/testing/eks-pod-identity/pod-default.yaml
      cat $(workspaces.source.path)/perf-tests/clusterloader2/testing/eks-pod-identity/config.yaml
      cat $(workspaces.source.path)/perf-tests/clusterloader2/testing/eks-pod-identity/pod-default.yaml
      cd $(workspaces.source.path)/perf-tests/clusterloader2/

      ENABLE_EXEC_SERVICE=false ./clusterloader --kubeconfig=$KUBECONFIG --testconfig=$(workspaces.source.path)/perf-tests/clusterloader2/testing/eks-pod-identity/config.yaml --testoverrides=$(workspaces.source.path)/overrides.yaml --nodes=$(params.nodes) --provider=eks --report-dir=$(workspaces.results.path) --alsologtostderr --v=2
      exit_code=$?
      if [ $exit_code -eq 0 ]; then
      echo "1" | tee $(results.datapoint.path)
      else
      echo "0" | tee $(results.datapoint.path)
      fi
      exit $exit_code
    timeout: 30000s
  - name: upload-results
    image: amazon/aws-cli
    workingDir: $(workspaces.results.path)
    script: |
      yum install -y jq

      S3_RESULT_PATH=$(cat $(results.s3_result.path))
      echo "S3 Path: $S3_RESULT_PATH"
      aws sts get-caller-identity

      REGION=$(params.region)
      ENDPOINT_FLAG=""
      if [ -n "$(params.endpoint)" ]; then
        ENDPOINT_FLAG="--endpoint $(params.endpoint)"
      fi

      CLUSTER_NAME=$(params.cluster-name)
      NAMESPACE=$(params.cl2-metric-namespace)
      DIMENSION_NAME=$(params.cl2-metric-dimension-name)
      DIMENSION_VALUE=$CLUSTER_NAME
      METRIC_LATENCY_NAME=$(params.cl2-metric-latency-name)
      PERIOD=$(params.cl2-metric-period)

      # since the scalability test is running with the same cluster name, with cluster recreation
      # it is important to know the range of start and end time to query metrics for the current run
      # here we use cluster creation time start as start time and the current time as end time
      START_TIME=$(aws eks $ENDPOINT_FLAG --region $REGION describe-cluster \
        --name "$CLUSTER_NAME" \
        --query "cluster.createdAt" \
        --output text)

      END_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

      response=$(aws cloudwatch get-metric-statistics \
        --region "$REGION" \
        --namespace "$NAMESPACE" \
        --metric-name "$METRIC_LATENCY_NAME" \
        --dimensions Name="$DIMENSION_NAME",Value="$DIMENSION_VALUE" \
        --start-time "$START_TIME" \
        --end-time "$END_TIME" \
        --period "$PERIOD" \
        --extended-statistics p50 p99 p99.95 \
        --output json)

      # extract p50 p99 p99.95 of credential fetching
      latest=$(echo "$response" | jq -r '.Datapoints | sort_by(.Timestamp) | last')
      p50=$(echo "$latest" | jq -r '."ExtendedStatistics"."p50" // "N/A"')
      p99=$(echo "$latest" | jq -r '."ExtendedStatistics"."p99" // "N/A"')
      p9995=$(echo "$latest" | jq -r '."ExtendedStatistics"."p99.95" // "N/A"')

      response=$(aws cloudwatch get-metric-statistics \
        --region "$REGION" \
        --namespace "$NAMESPACE" \
        --metric-name "$METRIC_LATENCY_NAME" \
        --dimensions Name="$DIMENSION_NAME",Value="$DIMENSION_VALUE" \
        --start-time "$START_TIME" \
        --end-time "$END_TIME" \
        --period "$PERIOD" \
        --statistics SampleCount \
        --output json)

      total_samples=$(echo "$response" | jq '[.Datapoints[].SampleCount] | add // 0')
      rate=$(params.cl2-default-qps)

      # save metric results for s3 upload
      cat <<EOF > eks_pod_identity_test_summary.json
      {
        "start_time": "$START_TIME",
        "end_time": "$END_TIME",
        "total_samples": $total_samples,
        "rate": $rate,
        "p50": $p50,
        "p99": $p99,
        "p99.95": $p9995
      }
      EOF

      # we expect to see all files from loadtest that clusterloader2 outputs here in this dir
      ls -larth
      aws s3 cp . s3://$S3_RESULT_PATH/  --recursive

      # if p99.95 is equal to or more than 1 second, exit with failure
      int_p9995=$(echo "$p9995" | awk '{printf "%d", $1}')
      echo "p99.95 is $p9995"
      if [ "$int_p9995" -lt 1 ]; then
        echo "1" | tee $(results.datapoint.path)
      else
        echo "0" | tee $(results.datapoint.path)
      fi
