apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: awscli-karpenter-cfn-stack
  namespace: scalability
spec:
  description: |
    Creates the karpenter instance roles and sqs interruption queue
  params:
  - name: cluster-name
    description: The name of the cluster
  - name: karpenter-version
    description: Version of Karpenter to deploy
  - name: endpoint
    description: Endpoint to use with EKS
  - name: region
    default: us-west-2
    description: The region where the cluster is in.
  - name: account-id
    description: The aws account the cluster is running in
  workspaces:
  - name: source
    mountPath: /src/karpenter/
  steps:
  - name: create-stack
    image: alpine/k8s:1.30.2
    script: |
      STACK_NAME=Karpenter-$(params.cluster-name)
      STACK_STATUS=$(aws cloudformation describe-stacks --query 'Stacks[?StackName==`'${STACK_NAME}'`].StackStatus' --output text  --region $(params.region))
      curl -fsSL https://raw.githubusercontent.com/aws/karpenter-provider-aws/$(params.karpenter-version)/website/content/en/preview/getting-started/getting-started-with-karpenter/cloudformation.yaml -o $(workspaces.source.path)cloudformation.yaml

      cat /src/karpenter/cloudformation.yaml
      
      UPDATE_OUTPUT=$(aws eks update-cluster-config --name $(params.cluster-name) --access-config authenticationMode=API_AND_CONFIG_MAP --endpoint $(params.endpoint))
      
      echo $UPDATE_OUTPUT

      # Extract the update ID from the output
      UPDATE_ID=$(echo "$UPDATE_OUTPUT" | jq -r '.update.id // empty')
      
      echo "Waiting for cluster config update $UPDATE_ID to complete..."
      
      # Wait for the update to complete
      while true; do
        UPDATE_STATUS=$(aws eks describe-update --name $(params.cluster-name) --update-id "$UPDATE_ID" --endpoint $(params.endpoint) --query 'update.status' --output text)
        
        case "$UPDATE_STATUS" in
          "Successful")
            echo "Cluster config update completed successfully"
            break
            ;;
          "Failed"|"Cancelled")
            echo "Cluster config update failed with status: $UPDATE_STATUS"
            exit 1
            ;;
          "InProgress")
            echo "Update still in progress, waiting 30 seconds..."
            sleep 30
            ;;
          *)
            echo "Unknown update status: $UPDATE_STATUS"
            sleep 30
            ;;
        esac
      done
      
      if [[ "$STACK_STATUS" == "" ]]; then
        aws cloudformation deploy \
          --stack-name "Karpenter-$(params.cluster-name)" \
          --template-file $(workspaces.source.path)cloudformation.yaml \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides "ClusterName=$(params.cluster-name)"
    
        aws cloudformation wait stack-create-complete --stack-name $STACK_NAME --region $(params.region)
        echo "CREATED_CFN_STACK=$STACK_NAME"
      else
          echo "$STACK_NAME Already exists"
      fi

      aws eks describe-cluster --name "$(params.cluster-name)" --output text --endpoint $(params.endpoint)

      export AWS_EKS_ENDPOINT=$(params.endpoint)
      # Check if OIDC provider is already associated
      echo "Associating OIDC provider with cluster..."
      eksctl utils associate-iam-oidc-provider --cluster "$(params.cluster-name)" --approve

      # Check if access entry already exists
      if aws eks describe-access-entry --cluster-name "$(params.cluster-name)" --principal-arn "arn:aws:iam::$(params.account-id):role/KarpenterNodeRole-$(params.cluster-name)" --endpoint $(params.endpoint) >/dev/null 2>&1; then
        echo "Access entry for KarpenterNodeRole already exists. Skipping creation..."
      else
        echo "Creating access entry for KarpenterNodeRole..."
        aws eks create-access-entry \
          --cluster-name "$(params.cluster-name)" \
          --principal-arn "arn:aws:iam::$(params.account-id):role/KarpenterNodeRole-$(params.cluster-name)" \
          --endpoint $(params.endpoint) \
          --type EC2_LINUX
      fi
