---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: awscli-eks-cluster-teardown
  namespace: scalability
spec:
  description: |
    Teardown an EKS cluster.
    This Task can be used to teardown an EKS cluster with mng in an AWS account.
  params:
  - name: cluster-name
    description: The name of the EKS cluster which will be teared down.
  - name: region
    default: us-west-2
    description: The region where the cluster is in.
  - name: endpoint
    default: ""
  - name: namespace-count
    description: The number of namespaces for EKS Pod Identity test.
    default: "0"
  - name: slack-hook
    default: ""
  - name: slack-message
    default: "Job is completed"
  - name: service-role-stack-name
  - name: node-role-stack-name
  - name: launch-template-stack-name
  steps:
  - name: delete-cluster
    image: alpine/k8s:1.23.7
    script: |
      set +e
      ENDPOINT_FLAG=""
      if [ -n "$(params.endpoint)" ]; then
        ENDPOINT_FLAG="--endpoint $(params.endpoint)"
      fi

      for i in `aws eks list-nodegroups --cluster-name $(params.cluster-name) $ENDPOINT_FLAG --region $(params.region)  | jq -r '.nodegroups[]'`;
      do
          aws eks delete-nodegroup --nodegroup-name $i --cluster-name $(params.cluster-name) $ENDPOINT_FLAG --region $(params.region);
          aws eks wait nodegroup-deleted --nodegroup-name $i --cluster-name $(params.cluster-name) $ENDPOINT_FLAG --region $(params.region);
      done;
      echo "Starting to delete cluster..."
      aws eks delete-cluster --name $(params.cluster-name) --region $(params.region) $ENDPOINT_FLAG
      echo "Waiting for cluster to be deleted..."
      aws eks wait cluster-deleted --name $(params.cluster-name) --region $(params.region) $ENDPOINT_FLAG
      echo "Cluster is deleted..."

      MANAGED_POLICY_ARN="arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      for i in $(seq 1 $(params.namespace-count)); do
        PIA_ROLE_NAME=$(params.cluster-name)-pia-role-$i
        PIA_ROLE_EXISTS=$(aws iam get-role --role-name $PIA_ROLE_NAME --query 'Role.RoleName' --output text 2>/dev/null)
        if [ "$PIA_ROLE_EXISTS" == "$PIA_ROLE_NAME" ]; then
          aws iam detach-role-policy --role-name $PIA_ROLE_NAME --policy-arn $MANAGED_POLICY_ARN
          aws iam delete-role --role-name $PIA_ROLE_NAME
          echo "Role $PIA_ROLE_NAME deleted successfully."
        else
          echo "Role $PIA_ROLE_NAME does not exist, no action needed."
        fi
      done
  - name: teardown-eks-role-stack
    image: alpine/k8s:1.23.7
    script: |
      aws cloudformation delete-stack --stack-name $(params.service-role-stack-name)
      aws cloudformation delete-stack --stack-name $(params.node-role-stack-name)
      aws cloudformation delete-stack --stack-name $(params.launch-template-stack-name)
  - name: send-slack-notification
    image: alpine/k8s:1.23.7
    script: |
      if [ -n "$(params.slack-hook)" ]; then
        curl -H "Content-type: application/json" --data '{"Message": "$(params.slack-message)"}' -X POST  $(params.slack-hook)
      fi
  - name: awscli-delete-vpc
    image: alpine/k8s:1.23.7
    script: |
      #!/bin/bash
      aws sts get-caller-identity
      # Check if the stack exists
      aws cloudformation --region $(params.region) describe-stacks --stack-name $(params.cluster-name)
      if [ $? -ne 0 ]; then
        echo "Stack $(params.cluster-name) not found. Exiting..."
        exit 1
      else
        echo "Deleting stack $(params.cluster-name)..."
      fi
      #Deletes the CFN stack
      aws cloudformation delete-stack --region $(params.region) --stack-name $(params.cluster-name)
      # Wait for the stack to be deleted
      aws cloudformation wait stack-delete-complete --region $(params.region) --stack-name $(params.cluster-name)
      echo "Stack deleted successfully!"
