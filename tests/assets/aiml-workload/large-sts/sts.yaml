apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: aiml-training-job-{{.Group}}
  labels:
    app: aiml-training-job
    group: {{.Group}}
spec:
  serviceName: aiml-training-service
  replicas: {{.Replicas}}
  podManagementPolicy: Parallel 
  selector:
    matchLabels:
      app: aiml-training-job
      group: {{.Group}}
  template:
    metadata:
      labels:
        app: aiml-training-job
        group: {{.Group}}
    spec:
      nodeSelector:
        purpose: ml-large
      containers:
      - name: app-with-awsapi
        image:  953421922360.dkr.ecr.us-west-2.amazonaws.com/aws-cli:2.27.49
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: {{.RequestCPU}}
            memory: {{.RequestMemory}}
          limits:
            cpu: {{.LimitCPU}}
            memory: {{.LimitMemory}}
        env:
          - name: CLUSTER_NAME
            value: "{{.ClusterName}}"
        command:
          - sh
          - -c
          - |
            #ToDo remove this once PIA is compliant with exit criteria
            sleep 3600
            AUTH_TOKEN=$(cat $AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE)
            MAX_ATTEMPTS=7
            INITIAL_DELAY=0.2  # 200ms
            start_epoch=$(date +%s%3N)
            METRIC_MAX_RETRIES=3
            METRIC_RETRY_DELAY=1
            NAMESPACE=TitanApplicationLatencyForLargeSTS
            DIMENSION_NAME=ClusterName
            DIMENSION_VALUE={{.ClusterName}}
            METRIC_LATENCY_NAME=TitanApplicationLatencyForLargeSTS

            echo "Starting credential fetch and S3 verification process..."

            # Fetch credentials from EKS Pod Identity agent with exponential backoff
            for i in $(seq 0 $((MAX_ATTEMPTS - 1))); do
              status_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 2 -H "Authorization: $AUTH_TOKEN" http://169.254.170.23/v1/credentials)
              if [ "$status_code" -eq 200 ]; then
                echo "Successfully fetched credentials at attempt $i"
                break
              fi

              if [ "$i" -eq $((MAX_ATTEMPTS - 1)) ]; then
                echo "Failed to fetch credentials after $MAX_ATTEMPTS attempts. Exiting."
                exit 1
              fi

              SLEEP_TIME=$(echo "$INITIAL_DELAY * (2 ^ $i)" | bc -l)
              echo "Credential fetch failed. Sleeping $SLEEP_TIME seconds before retry..."
              sleep "$SLEEP_TIME"
            done

            # Verify S3 access
            echo "Verifying S3 access..."
            while ! aws s3 ls; do
              echo "Waiting for S3 bucket access..."
              sleep 5
            done
            echo "S3 bucket is accessible, proceeding."

            # Calculate total latency for credential fetch + S3 verification
            end_epoch=$(date +%s%3N)
            latency_ms=$((end_epoch - start_epoch))
            latency_sec=$(awk "BEGIN { print $latency_ms / 1000 }")
            
            echo "Total operation latency: ${latency_sec} seconds (credential fetch + S3 verification)"
            
            # Send combined operation latency metric
            for ((j=1; j<=METRIC_MAX_RETRIES; j++)); do
              aws cloudwatch put-metric-data \
                --namespace "$NAMESPACE" \
                --metric-name "$METRIC_LATENCY_NAME" \
                --dimensions "$DIMENSION_NAME=$DIMENSION_VALUE" \
                --value "$latency_sec" \
                --unit Seconds && {
                  echo "Metric $METRIC_LATENCY_NAME sent successfully with value: ${latency_sec}s"
                  break
              }

              if [ "$j" -lt "$METRIC_MAX_RETRIES" ]; then
                echo "Attempt $j failed. Retrying in $METRIC_RETRY_DELAY seconds..." >&2
                sleep $METRIC_RETRY_DELAY
                METRIC_RETRY_DELAY=$((METRIC_RETRY_DELAY * 2)) # exponential backoff
              else
                echo "Failed to send metric $METRIC_LATENCY_NAME after $METRIC_MAX_RETRIES attempts." >&2
                exit 1
              fi
            done

            echo "Operation completed successfully. Keeping pod alive..."
            # Keep pod alive
            while true; do
              echo "Sleeping for 1 hour..."
              sleep 3600
            done